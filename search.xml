<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>卷首语</title>
    <url>/project/2022/05/17/%E5%8D%B7%E9%A6%96%E8%AF%AD/</url>
    <content><![CDATA[<p>欢迎来到嘉嘉的学习笔记，我将在这里记录平时学习过程中的所思所学所得。</p>
<p>希望我的见闻和感悟能给你带来一些启发。</p>
<p><strong>让我们一起共同进步。</strong></p>
]]></content>
      <categories>
        <category>首页</category>
      </categories>
      <tags>
        <tag>首页</tag>
      </tags>
  </entry>
  <entry>
    <title>制作C callgraph producer 的总结</title>
    <url>/project/2022/05/18/%E5%88%B6%E4%BD%9CC-callgraph-producer-%E7%9A%84%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  C callgraph producer 本质上是对已有的工具进行集成，我所做的工作仅仅只是将自动生成 C 语言函数调用图的过程中需要使用的多条指令集成为一条命令行指令，并将所需要的各软件和脚本的安装和注册为系统指令的过程用脚本实现。</p>
<span id="more"></span>
<p>目前项目已经开源到 <em>GitHub</em> 上：<a href="https://github.com/ljs-2002/C-call-graph-producer.git">C callgraph producer</a></p>
<h2 id="getops-函数"><a href="#getops-函数" class="headerlink" title="getops 函数"></a>getops 函数</h2><p>在制作<code>C callgraph producer</code> 的过程中，粗略的学习了一下<code>shell</code>的语法，其中最主要的是<code>getops</code>函数的使用。</p>
<blockquote>
<p>用法：getopts [option[:]] VARIABLE</p>
</blockquote>
<ul>
<li><h3 id="option"><a href="#option" class="headerlink" title="option"></a>option</h3><ul>
<li>例子：<code>&quot;a:b:cd:&quot;</code>，<code>&quot;:x:y:zw&quot;</code></li>
<li>可选的命令行选项，若后面带有 “:” 表示该选项带有参数，参数会被保存在 <code>OPTARG</code> 变量中，通过 <code>$OPTARG</code> 调用。如第一个例子中 <code>a,b,d</code> 是带有参数的选项，在使用时应使用诸如 <code>command -a xxx</code> 的方式；而 <code>c</code> 是不带参数的选项。读取到的选项会被储存在 <code>VARIABLE</code> 中，当读取到选项时 <code>getops</code> 会返回<code>TRUE</code>；</li>
<li>option的开头可以带一个 “:” 表示忽略系统报错，使用自定义报错，如第二个例子所示。<ul>
<li>若没有开头的”:”，invalid option（无效选项）错误和 miss option argument（丢失选项）错误都会使 VARIABLE 被设成 “?”，<code>$OPTARG</code> 被设为出问题的选项；</li>
<li>若有开头的 “:”，getopts 会区分 invalid option (无效选项) 错误和 miss option argument（丢失选项）错误。当为 invalid option 时 VARIABLE 会被设成 “?”，<code>$OPTARG</code> 是出问题的选项；当为 miss option argument 时 VARIABLE 会被设成 “:”，<code>$OPTARG</code> 被设为出问题的选项；</li>
<li><strong><em>注意：”？” 必须用\转义，即 “\?” ,同时只有当命令接收到的最后一个选项是需要带有参数的选项却没有接收到参数时才会出现 miss option argument，其他情况下该选项之后的第一个字段会被作为参数读取。</em></strong></li>
</ul>
</li>
</ul>
</li>
<li><h3 id="使用举例"><a href="#使用举例" class="headerlink" title="使用举例"></a>使用举例</h3></li>
</ul>
<blockquote>
<p>文件名 test.sh</p>
</blockquote>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> <span class="string">&quot;:a:bc:&quot;</span> opt; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$opt</span> <span class="keyword">in</span></span><br><span class="line">        a)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;-a <span class="variable">$OPTARG</span>&quot;</span>;</span><br><span class="line">        ;;</span><br><span class="line">        b)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;-b&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">        c)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;-c <span class="variable">$OPTARG</span>&quot;</span>;</span><br><span class="line">        ;;</span><br><span class="line">        \?)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;invalid option -<span class="variable">$OPTARG</span>&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">        :)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;miss option argument -<span class="variable">$OPTARG</span>&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>  <strong>输入1</strong><br>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh test.sh -a 1 -b -c 2</span><br></pre></td></tr></table></figure><br>  <strong>输出1</strong><br>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-a 1</span><br><span class="line">-b</span><br><span class="line">-c 2</span><br></pre></td></tr></table></figure><br>  <strong>输入2</strong><br>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh test.sh -a -c -d</span><br></pre></td></tr></table></figure><br>  <strong>输出2</strong><br>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-a -c</span><br><span class="line">invalid option -d</span><br></pre></td></tr></table></figure><br>  <strong>输入3</strong><br>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh test.sh -a 1 -c</span><br></pre></td></tr></table></figure><br>  <strong>输出3</strong><br>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-a 1</span><br><span class="line">miss option argument -c</span><br></pre></td></tr></table></figure></p>
<h2 id="后续改进"><a href="#后续改进" class="headerlink" title="后续改进"></a>后续改进</h2><p>目前指令只实现了最基本的将输入的命令行参数转化为实际执行指令的各个命令行参数并执行，只是对已有轮子的简单组合。在之后的更新中预计实现四个功能：<strong><em>指定graphviz布局器</em></strong>，<strong><em>检测输入的文件是否存在</em></strong>，<strong><em>自动检测文件类型</em></strong>，<strong><em>不显示系统函数或给定函数</em></strong>。有其他建议欢迎在文末留言。</p>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>自学</tag>
      </tags>
  </entry>
</search>
